apply plugin: 'java-library'
apply plugin: 'com.google.protobuf'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //implementation 'com.google.protobuf:protobuf-java-util:3.2.0'
    //implementation 'com.google.protobuf:protobuf-java:3.2.0'
    implementation 'com.google.protobuf:protobuf-javalite:3.10.0'

}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        //classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
        classpath 'com.google.protobuf:protobuf-javalite:3.10.0'

    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            // include self written and generated code -- also include generated source for main project to access
            srcDirs 'src/main/java', 'generated-sources/main/java','build/generated/source/proto/main/java'
        }

    }
    // remove the test configuration - at least in your example you don't have a special test proto file
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        //artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
        artifact = 'com.google.protobuf:protoc:3.10.0'
        //artifact = 'com.google.protobuf:protoc:3.4.0'
    }

    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each { task ->
            // Here you can configure the task --added to support protobuf-lite
            task.builtins {
                //remove java
                java {
                    option "lite"
                }
            }

        }

        // In addition to all(), you may get the task collection by various
        // criteria:

        // (Java only) returns tasks for a sourceSet
        ofSourceSet('main')

    }
}
